<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pintaigao He</title>
  
  <subtitle>Pintaigao He&#39;sBlog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-24T00:55:09.464Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Pintaigao He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Router V4 Embed Style</title>
    <link href="http://yoursite.com/2018/04/23/React-Router-V4-Embed-Style/"/>
    <id>http://yoursite.com/2018/04/23/React-Router-V4-Embed-Style/</id>
    <published>2018-04-23T23:51:23.000Z</published>
    <updated>2018-04-24T00:55:09.464Z</updated>
    
    <content type="html"><![CDATA[<p>So recently I do in a Project and it is a Dashboard,<br>something like that:</p><p><div style="text-align: center"><br>    <img src="/2018/04/23/React-Router-V4-Embed-Style/image.png" style="width: 60%; "><br></div><br>    which need a static page (sidebar header) and only the right area will be truely change(which is a real good example of embeding <route>)<br><a id="more"></a><br>So I use the following way to write the web Route:</route></p><p><div style="text-align: center"><br>    <img src="/2018/04/23/React-Router-V4-Embed-Style/route.png" style="width: 30%; "><br></div><br>Oh so seems like <route> embeded <route> and then embed <route>, which means the sidebar and header need to be static during the whole project, Some of the content in <code>Inventory</code> also need to unchange.<br>So here is the code that how I configure it:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">  &lt;SideBar /&gt;</span><br><span class="line">  &lt;Header /&gt;</span><br><span class="line">  &lt;div className=<span class="string">"dashboard-area"</span>&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">"/"</span> &#125; /&gt; <span class="comment">// this is the whole page</span></span><br><span class="line">      &lt;Route path=<span class="string">"/signup"</span> component=&#123;SignUp&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/link-pos"</span> component=&#123;LinkPOS&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/Dashboard"</span> component=&#123;Dashboard&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/Inventory"</span> component=&#123;Inventory&#125; /&gt;</span><br><span class="line">      &lt;Redirect to=<span class="string">"/"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/BrowserRouter&gt;</span></span><br></pre></td></tr></table></figure></route></route></route></p><p>and as go to the <code>/Inventory</code> page, it contains multiple part, one is the listing of Item, which will be seen as enterying (to = ‘/‘), and when click the item, will show the detail page(to = ‘/:id’)<br>So see the code:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className = <span class="string">'Inventory'</span>&gt;</span><br><span class="line">  &lt;InventoryHeader /&gt; <span class="comment">// which this is static on Inventory page</span></span><br><span class="line">    &lt;div className = <span class="string">'inventory-router-area'</span>&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/Inventory"</span> exact  render= &#123;() =&gt; dashboardSection&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">'/Inventory/1'</span> exact render=&#123;() =&gt; DetailPage&#125; /&gt;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><p>So, that’s it!</p><blockquote><p>Note:Be Careful that <code>&lt;Router /&gt;</code> only as one child</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So recently I do in a Project and it is a Dashboard,&lt;br&gt;something like that:&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;text-align: center&quot;&gt;&lt;br&gt;    &lt;img src=&quot;/2018/04/23/React-Router-V4-Embed-Style/image.png&quot; style=&quot;width: 60%; &quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;    which need a static page (sidebar header) and only the right area will be truely change(which is a real good example of embeding &lt;route&gt;)&lt;br&gt;&lt;/route&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to update the child component in React(using props)</title>
    <link href="http://yoursite.com/2018/03/26/How-to-update-the-child-component-in-React-using-props/"/>
    <id>http://yoursite.com/2018/03/26/How-to-update-the-child-component-in-React-using-props/</id>
    <published>2018-03-27T01:02:42.000Z</published>
    <updated>2018-03-27T01:26:46.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-update-the-child-component-in-React-using-props"><a href="#How-to-update-the-child-component-in-React-using-props" class="headerlink" title="How to update the child component in React(using props)"></a>How to update the child component in React(using props)</h1><p>So recently I am writing a Project that to reuse the component which is some kinds of buttons, and this is how I wrote it (within only one file)<br> <a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buttons</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.word = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">''</span></span><br><span class="line">    <span class="keyword">this</span>.img = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.wordslibrary(<span class="keyword">this</span>.props.type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps)&#123;</span><br><span class="line">    <span class="keyword">this</span>.wordslibrary(nextProps.type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  wordslibrary = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'save-to-collections'</span>:</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'save-buttons'</span>;</span><br><span class="line">        <span class="keyword">this</span>.word = <span class="string">'Save'</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'remove-to-collections'</span>:</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'remove-buttons'</span>;</span><br><span class="line">        <span class="keyword">this</span>.word = <span class="string">'Remove'</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  handleButtonsWords = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className = &#123;<span class="keyword">this</span>.className + <span class="string">'-word-container'</span>&#125; &gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="keyword">this</span>.word&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &#123; this.img != '' &amp;&amp; &lt;img src= &#123;this.img&#125;/</span>&gt; &#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">    &lt;button className = &#123;this.className&#125; onClick = &#123;this.props.onClick&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.handleButtonsWords() &#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Buttons;</span><br></pre></td></tr></table></figure></p><p>and this is how I use it:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ignore the regular part</span></span><br><span class="line"><span class="keyword">const</span> &#123; collectionName, collectionSavedItems, saved &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">const</span> actionButtons = <span class="xml"><span class="tag">&lt;<span class="name">Buttons</span> <span class="attr">type</span> = <span class="string">&#123;saved?</span>'<span class="attr">remove-to-collections</span>'<span class="attr">:</span>'<span class="attr">save-to-collections</span>'&#125; <span class="attr">onClick</span> = <span class="string">&#123;saved?this.deleteItem:this.addItem&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;div className=&#123;buttonContainerClass&#125;&gt;</span><br><span class="line">    &#123; actionButtons &#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>And here come’s the issue: when I click the Buttons(call onClick and change save value), it should render a new Buttons( because saved change ),but in fact, it didn’t, why?</p><p>So I search online, and it said like this:</p><blockquote><p>Passing the intial state to a component as a prop is an anti-pattern because the getInitialState (in our case the constuctor) method is only called the first time the component renders. Never more. Meaning that, if you re-render that component passing a different value as a prop, the component will not react accordingly, because the component will keep the state from the first time it was rendered. It’s very error prone.</p></blockquote><p>which means props is <code>read-only</code>,I can’t change it.</p><p>So if can’t avoid such a situation the ideal solution is to use the method <code>componentWillReceiveProps</code> to listen for new props.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; <span class="attr">data</span>: nextProps.data &#125;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And… All good to go</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;How-to-update-the-child-component-in-React-using-props&quot;&gt;&lt;a href=&quot;#How-to-update-the-child-component-in-React-using-props&quot; class=&quot;headerlink&quot; title=&quot;How to update the child component in React(using props)&quot;&gt;&lt;/a&gt;How to update the child component in React(using props)&lt;/h1&gt;&lt;p&gt;So recently I am writing a Project that to reuse the component which is some kinds of buttons, and this is how I wrote it (within only one file)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Do you really understand Promise</title>
    <link href="http://yoursite.com/2018/02/21/Do-you-really-understand-Promise/"/>
    <id>http://yoursite.com/2018/02/21/Do-you-really-understand-Promise/</id>
    <published>2018-02-21T17:19:11.000Z</published>
    <updated>2018-02-21T17:19:11.548Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>So the question is how to manage the other reducer&#39;s state in current reducer?</title>
    <link href="http://yoursite.com/2018/02/20/So-the-question-is-how-to-manage-the-other-reducer-s-state-in-current-reducer/"/>
    <id>http://yoursite.com/2018/02/20/So-the-question-is-how-to-manage-the-other-reducer-s-state-in-current-reducer/</id>
    <published>2018-02-21T02:59:09.000Z</published>
    <updated>2018-02-21T17:20:29.734Z</updated>
    
    <content type="html"><![CDATA[<p>Actually No need it</p><p><img src="/2018/02/20/So-the-question-is-how-to-manage-the-other-reducer-s-state-in-current-reducer/image.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Actually No need it&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/02/20/So-the-question-is-how-to-manage-the-other-reducer-s-state-in-current-reducer/image.png&quot;
      
    
    </summary>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>How to pass props in react-router&#39;s component property</title>
    <link href="http://yoursite.com/2018/02/18/How-to-pass-props-in-react-router-s-component-property/"/>
    <id>http://yoursite.com/2018/02/18/How-to-pass-props-in-react-router-s-component-property/</id>
    <published>2018-02-18T05:45:33.000Z</published>
    <updated>2018-02-18T05:46:35.122Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/18/How-to-pass-props-in-react-router-s-component-property/image1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/18/How-to-pass-props-in-react-router-s-component-property/image1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>So what is the difference between render and component in React Router &lt;Route&gt;</title>
    <link href="http://yoursite.com/2018/02/11/So-what-is-the-difference-between-render-and-component-in-React-Router-Route/"/>
    <id>http://yoursite.com/2018/02/11/So-what-is-the-difference-between-render-and-component-in-React-Router-Route/</id>
    <published>2018-02-11T22:56:50.000Z</published>
    <updated>2018-02-11T22:56:50.757Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>posts</title>
    <link href="http://yoursite.com/2018/02/11/posts/"/>
    <id>http://yoursite.com/2018/02/11/posts/</id>
    <published>2018-02-11T22:55:55.000Z</published>
    <updated>2018-02-11T22:55:55.476Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>So,let&#39;s talk about redux and react+redux</title>
    <link href="http://yoursite.com/2018/02/09/So-let-s-talk-about-redux-and-react-redux/"/>
    <id>http://yoursite.com/2018/02/09/So-let-s-talk-about-redux-and-react-redux/</id>
    <published>2018-02-09T21:45:53.000Z</published>
    <updated>2018-02-09T21:45:53.093Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some tips about css when I making a Tour Page</title>
    <link href="http://yoursite.com/2018/02/02/Some-tips-about-css-when-I-making-a-Tour-Page/"/>
    <id>http://yoursite.com/2018/02/02/Some-tips-about-css-when-I-making-a-Tour-Page/</id>
    <published>2018-02-02T20:24:14.000Z</published>
    <updated>2018-02-02T20:24:14.821Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How To Collaborate on Github with Multi-Users</title>
    <link href="http://yoursite.com/2018/01/29/How-To-Collaborate-on-Github-with-Multi-Users/"/>
    <id>http://yoursite.com/2018/01/29/How-To-Collaborate-on-Github-with-Multi-Users/</id>
    <published>2018-01-29T05:13:12.000Z</published>
    <updated>2018-01-29T06:27:35.131Z</updated>
    
    <content type="html"><![CDATA[<center><br><img src="/2018/01/29/How-To-Collaborate-on-Github-with-Multi-Users/image1.jpg" alt=""><br></center><br><a id="more"></a><br>So now we start a new project on Github:<br><br><center><br><img src="/2018/01/29/How-To-Collaborate-on-Github-with-Multi-Users/image3.png" alt=""><br></center><p>and now clone it to the local storage<br><code>git clone git@github.com:hptg1994/NewTest.git</code></p><p>So now every body comes in and start working on this project(Assume the master branch named <code>master</code>)</p><p>1) if someone needs to develop a new function, he/she need to make a dev branch from the master:<br><code>git checkout -b hptg1994/development</code></p><p>so a new branch create and call <code>hptg1994/development</code></p><p>2) if the master brach encounters a heavy bug and need to be repaired immediately, someone create a new branch and do it:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git checkout -bhotfix</span><br><span class="line">..... //fixxing</span><br><span class="line">git merge --no-ff hotfix //quick merge and no need to make comment</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>3) now another developer have finished the new component and ready to publish it:<strong>(Assume now the working branch is hptg1994/development)</strong></p><ol><li><p>First : Always checking if any changes on master branch,even it is <code>already up-to-dates</code>( who knows :) )<br><code>git pull origin master hptg1994/development</code><br>pull from (mater) to (hptg1994/development)</p></li><li><p>After change the stuff, add, commit, push on your own branch(dont push on the master branch!!!)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;what have been change&quot;</span><br><span class="line">git push origin hptg1994/development</span><br></pre></td></tr></table></figure></li><li><p>As you may think it is good to merge onto the master branch, go to remote repositories page and do the pull request!</p></li></ol><p><strong>Updating</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;br&gt;&lt;img src=&quot;/2018/01/29/How-To-Collaborate-on-Github-with-Multi-Users/image1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
      <category term="Github" scheme="http://yoursite.com/categories/Git/Github/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ruby Study Note</title>
    <link href="http://yoursite.com/2018/01/28/Ruby-Study-Note/"/>
    <id>http://yoursite.com/2018/01/28/Ruby-Study-Note/</id>
    <published>2018-01-28T22:54:37.000Z</published>
    <updated>2018-01-29T22:16:05.241Z</updated>
    
    <content type="html"><![CDATA[<p>So recently I am studying Ruby Programming language, here is some code:</p><p><strong><code>get</code>:</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">"Hi,whats your name?"</span></span><br><span class="line">name = get.chomp</span><br><span class="line">puts <span class="string">"Great! What's your age?"</span></span><br><span class="line"></span><br><span class="line">age = get.chomp.to_i <span class="comment">#to Integer</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"Ok, so your name is <span class="subst">#&#123;name&#125;</span> and age is <span class="subst">#&#123;age&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>what it does is waiting the input on <code>get</code> method and continue process</p></blockquote><hr><p><strong><code>get.chomp</code>:</strong> get rid of the line break</p><hr><p><strong><code>.odd</code>,<code>.even</code>:</strong>boolean method,return true od false,using on <code>float</code> number will get error</p><hr><p><strong><code>10.5.floor</code>,<code>10.5.ceiling</code>:</strong>Will become 10 and 11<br><strong><code>10.5.round</code>:</strong>四舍五入<br><strong><code>10.52.round(2)</code>:</strong> start changing from the second dicimal(include second)</p><hr><p><strong><code>Integer.times</code>:</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.times&#123;<span class="params">|count|</span> puts <span class="string">"We are on number <span class="subst">#&#123;count&#125;</span>"</span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.times <span class="keyword">do</span> <span class="params">|count|</span></span><br><span class="line">puts <span class="string">"We are currently on loop number <span class="subst">#&#123;count&#125;</span>"</span></span><br><span class="line">puts <span class="string">"I'm having so much fun on learning ruby"</span></span><br><span class="line">puts <span class="string">"And remember my name is Pintaigao He"</span></span><br><span class="line"><span class="comment"># if you have more than one line code to be executed</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>Basically the <code>count</code> are self define variable and <strong>self increase!</strong>, and only usable within this block</p></blockquote><hr><p><strong><code>.upto</code>,<code>.downto</code></strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.downto(<span class="number">1</span>) &#123;<span class="params">|i|</span> puts <span class="string">"Countdown:<span class="subst">#&#123;i&#125;</span>"</span>&#125;</span><br><span class="line"><span class="comment">#same as above, i will automatically change one by one</span></span><br><span class="line"><span class="number">5</span>.downto(<span class="number">0</span>) <span class="keyword">do</span> <span class="params">|current_number|</span></span><br><span class="line">puts <span class="string">"We are curretly on <span class="subst">#&#123;current_number&#125;</span>"</span></span><br><span class="line">puts <span class="string">"Hooray!"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="number">5</span>.upto(<span class="number">10</span>) <span class="keyword">do</span> <span class="params">|num|</span></span><br><span class="line">puts <span class="string">"We're moving on up"</span></span><br><span class="line">puts <span class="string">"We're currently on <span class="subst">#&#123;num&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><p><strong><code>.step</code></strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.step(<span class="number">100</span>,<span class="number">5</span>)&#123; <span class="params">|number|</span> puts number &#125;</span><br><span class="line"><span class="comment">##step(number,gap#)</span></span><br><span class="line"><span class="number">0</span>.step(<span class="number">85</span>,<span class="number">7</span>) <span class="keyword">do</span> <span class="params">|n|</span></span><br><span class="line">puts <span class="string">"Alright,let's go up by 7 again"</span></span><br><span class="line">puts <span class="string">"I'm now on <span class="subst">#&#123;n&#125;</span>"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words = &lt;&lt; MLS</span><br><span class="line"><span class="comment">#mutlines words you input in the branch</span></span><br><span class="line">MLS</span><br></pre></td></tr></table></figure><hr><p><code>String.concat(String)</code> : words + words<br><code>String1.prepend(String2)</code> : String2 + String1</p><hr><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So recently I am studying Ruby Programming language, here is some code:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;get&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="Ruby" scheme="http://yoursite.com/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Interview with React</title>
    <link href="http://yoursite.com/2018/01/23/Interview-with-React/"/>
    <id>http://yoursite.com/2018/01/23/Interview-with-React/</id>
    <published>2018-01-23T22:27:45.000Z</published>
    <updated>2018-01-24T02:47:20.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h2><ol><li>What issue did React solve?</li><li>How to create and Design a good component?</li><li>When will <code>render()</code> being called in Component?</li><li>Will DOM always refresh and update when <code>render</code> being called?</li><li>lifecycle of Component<a id="more"></a></li><li>Which period should handle remote data loading?</li><li>In which life cycle the state can be changed?</li><li>When the state in different Componet(not parent releatice) need to mutally change, how to do with it?</li><li>What content should be in state?</li><li>How to optimize the Component?</li><li>What is the key properties in the component</li><li>The different between Component, Element and Instance</li><li>What happen when calling setState?</li><li>When to use Class Component and when to use Functional Component</li><li>What is refs and why is it important?</li><li>The difference between Controlled Component and Uncontrolled Compoent</li><li>Descripted how React dealing with event</li></ol><h2 id="What-issue-did-React-solve"><a href="#What-issue-did-React-solve" class="headerlink" title="What issue did React solve?"></a>What issue did React solve?</h2><p>a. Implementing Virtual DOM<br> What the Virtulal DOM did is: Caluculating the differnence between the old and new data and make the necessary DOM update which highly get rid of some unnecessary DOM update.For the DOM will re-rendering the whole application, resetting the innerHTML, even it is a tiny change on the page, which is performance reducing.</p><p>b. Componenilize<br> Obviously, we can divide the whole application into seperate piece, which make the project more manageable,  readable and reusable, which increase the efficient of development </p><p>c. Unidirectional data flow<br> In React the data flow are only one way — from parent to child, if the props on parent side change, then it will recursively passing the props to all the child components and re-rendering the them. So it let the data flows straightforward and easy to maintenances</p><h2 id="How-to-create-and-design-a-good-Component"><a href="#How-to-create-and-design-a-good-Component" class="headerlink" title="How to create and design a good Component"></a>How to create and design a good Component</h2><p>The goal of using Component in React is to the future reuse, so in the design of components need to follow the principle of high cohesion low coupling.</p><ul><li>React recommand to combine the component instead of inherit the component, so try not to make a large component.</li><li>Using high level component (A React compoent which packaged another React component) to achieve reusable component. It contains the props delegate and reverse inheritance.</li><li>Seperate logical parts and view parts</li><li>Finally, writing well-orgainized code</li></ul><h2 id="When-will-render-being-called-in-Component"><a href="#When-will-render-being-called-in-Component" class="headerlink" title="When will render() being called in Component?"></a>When will <code>render()</code> being called in Component?</h2><ul><li>When the state change(setState)</li><li>When the props change</li><li>There is a componentShouldUpdate Function and the default value is true. As we can rewrite the code and manipulate <code>render()</code></li></ul><h2 id="Will-DOM-always-refresh-and-update-when-render-being-called"><a href="#Will-DOM-always-refresh-and-update-when-render-being-called" class="headerlink" title="Will DOM always refresh and update when render being called?"></a>Will DOM always refresh and update when <code>render</code> being called?</h2><p>Not really</p><p>There are two kinds of DOM in React, when the <code>render()</code> get called, React will re-create a virtual DOM tree according to props or state.Although each time calling will re-generate, it happens on memory, it won’t affect the performance. And the virtual DOM update does not mean that the real DOM update, React uses the diff algorithm to compare the virtual DOM to the real DOM, which find out the smallest part needs to update, and then real DOM will update</p><p>So every time a state change causes the render function to be called but the real page DOM does not necessarily to be changed</p><h2 id="lifecycle-of-Component"><a href="#lifecycle-of-Component" class="headerlink" title="lifecycle of Component"></a>lifecycle of Component</h2><p>Including three stages: Initialization, Updating, Unmouting</p><p><strong>Initializtion</strong></p><ul><li>constructor() : Initiating state and binding </li><li>componentWillMount() : as what it means</li><li>render()</li><li>componentDidMount() : Instantly initiate after <code>render()</code> get called</li></ul><p><strong>Updating</strong></p><ul><li>componentWillReceiveProps(nextProps)：Initiating when the componet receiving new props</li><li>componentShouldUpdate(nextProps，nextState)：return true(defalut value)</li><li>componentWillUpdate()： Initisting when <code>componentShouldUpdate</code> get called</li><li>render()</li><li>componentDidUpdate(): Instantly initiate after <code>render()</code> get called</li></ul><p><strong>Unmouting</strong></p><ul><li>componentWillUnmount()</li><li>componentDidMount()</li></ul><h2 id="Which-period-should-handle-remote-data-loading"><a href="#Which-period-should-handle-remote-data-loading" class="headerlink" title="Which period should handle remote data loading?"></a>Which period should handle remote data loading?</h2><ul><li><p><code>componentDidMount()</code>, because it is a async requesting, We want the data being processed after all the componet being rendered, if the data requesting completed before all component are rendered, some of the under rendering Component will not get the new state</p><pre><code>Warning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component.</code></pre></li></ul><h2 id="In-which-life-cycle-the-state-can-be-changed"><a href="#In-which-life-cycle-the-state-can-be-changed" class="headerlink" title="In which life cycle the state can be changed?"></a>In which life cycle the state can be changed?</h2><ul><li>componentDidMount and componentDidUpdate</li><li>constructor、componentWillMount will cause error : as show aboved</li><li>setState in componentWillUpdate will cause dead lock</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;What issue did React solve?&lt;/li&gt;
&lt;li&gt;How to create and Design a good component?&lt;/li&gt;
&lt;li&gt;When will &lt;code&gt;render()&lt;/code&gt; being called in Component?&lt;/li&gt;
&lt;li&gt;Will DOM always refresh and update when &lt;code&gt;render&lt;/code&gt; being called?&lt;/li&gt;
&lt;li&gt;lifecycle of Component&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://yoursite.com/categories/Interview/"/>
    
      <category term="React&amp;Redux" scheme="http://yoursite.com/categories/Interview/React-Redux/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Interview" scheme="http://yoursite.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>The most frequently seen issue in React</title>
    <link href="http://yoursite.com/2018/01/23/The-most-frequently-seen-issue-in-React/"/>
    <id>http://yoursite.com/2018/01/23/The-most-frequently-seen-issue-in-React/</id>
    <published>2018-01-23T20:43:38.000Z</published>
    <updated>2018-01-23T21:10:12.873Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="React&amp;Redux" scheme="http://yoursite.com/categories/React-Redux/"/>
    
    
  </entry>
  
  <entry>
    <title>Seperating Component to Avoid Binding</title>
    <link href="http://yoursite.com/2018/01/23/Seperating-Component-tp-Avoid-Binding/"/>
    <id>http://yoursite.com/2018/01/23/Seperating-Component-tp-Avoid-Binding/</id>
    <published>2018-01-23T17:07:40.000Z</published>
    <updated>2018-01-23T22:46:58.442Z</updated>
    
    <content type="html"><![CDATA[<p>First let’s see a code sample below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      users: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Cory'</span> &#125;, </span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Meg'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  deleteUser = <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">users</span>: prevState.users.filter( <span class="function"><span class="params">user</span> =&gt;</span> user.id !== id)&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Users&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &#123; </span></span><br><span class="line"><span class="regexp">          this.state.users.map( user =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">              &lt;li key=&#123;user.id&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input </span></span><br><span class="line"><span class="regexp">                  type="button" </span></span><br><span class="line"><span class="regexp">                  value="Delete" </span></span><br><span class="line"><span class="regexp">                  onClick=&#123;() =&gt; this.deleteUser(user.id)&#125; </span></span><br><span class="line"><span class="regexp">                /</span>&gt; </span><br><span class="line">                &#123;user.name&#125;</span><br><span class="line">              &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">          &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Note: I wonder if I can delete the arrow function in the render(onClick = {this.deleteUser(user.id)}),and the console log out:</p><p>Warning: setState(…): Cannot update during an existing state transition (such as within <code>render</code> or another component’s constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to <code>componentWillMount</code>.</p></blockquote><p>See, using the ES6 feature(arrow function) can avoid binding. But as every time render runs, a new function is allocated, if you have a child components(like you have a lists), which all of them allocated this function, they will all re-render in spite of the state whether change or not, it is inefficient</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Extracting the child componet as a new componet(class)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserListItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  onDeleteClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// No bind needed since we can compose </span></span><br><span class="line">    <span class="comment">// the relevant data for this item here</span></span><br><span class="line">    <span class="keyword">this</span>.props.onClick(<span class="keyword">this</span>.props.user.id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No arrow func in render! 👍</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;input </span><br><span class="line">          type=<span class="string">"button"</span> </span><br><span class="line">          value=<span class="string">"Delete"</span> </span><br><span class="line">          onClick=&#123;<span class="keyword">this</span>.onDeleteClick&#125; </span><br><span class="line">        /&gt; </span><br><span class="line">        &#123;<span class="keyword">this</span>.props.user.name&#125;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">UserListItem.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  user: PropTypes.object.isRequired,</span></span><br><span class="line"><span class="regexp">  onClick: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default UserListItem;</span></span><br></pre></td></tr></table></figure><p>Then parent component’s render no longer need to contain an arrow function. It passes the relevant context for each list item down via props in the new “renderUserListItem” function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> UserListItem <span class="keyword">from</span> <span class="string">'./UserListItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      users: [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Cory'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Sherry'</span> &#125;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deleteUser = <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">users</span>: prevState.users.filter(<span class="function"><span class="params">user</span> =&gt;</span> user.id !== id) &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  renderUserListItem = <span class="function"><span class="params">user</span> =&gt;</span></span><br><span class="line">    &lt;UserListItem key=&#123;user.id&#125; user=&#123;user&#125; onClick=&#123;<span class="keyword">this</span>.deleteUser&#125; /&gt;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Users&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.state.users.map(this.renderUserListItem)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p>Note that instead of using an arrow function in render while mapping, we’re calling a new function declared outside of render on line 19. No more function allocations on each render. 👍</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;First let’s see a code sample below:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      users: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Cory&#39;&lt;/span&gt; &amp;#125;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Meg&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  deleteUser = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;id&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;prevState&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&quot;attr&quot;&gt;users&lt;/span&gt;: prevState.users.filter( &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;user&lt;/span&gt; =&amp;gt;&lt;/span&gt; user.id !== id)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h1&amp;gt;Users&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;          this.state.users.map( user =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;            return (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;              &amp;lt;li key=&amp;#123;user.id&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;                &amp;lt;input &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;                  type=&quot;button&quot; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;                  value=&quot;Delete&quot; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;                  onClick=&amp;#123;() =&amp;gt; this.deleteUser(user.id)&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;                /&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;user.name&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;            )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;          &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;lt;/u&lt;/span&gt;l&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;export default App;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Binding and Avoid Bidning in React</title>
    <link href="http://yoursite.com/2018/01/23/Binding-and-Avoid-Bidning-in-React/"/>
    <id>http://yoursite.com/2018/01/23/Binding-and-Avoid-Bidning-in-React/</id>
    <published>2018-01-23T16:46:52.000Z</published>
    <updated>2018-01-23T17:04:46.107Z</updated>
    
    <content type="html"><![CDATA[<p>First let’s see a code sample below</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Approach 1: Use React.createClass</span></span><br><span class="line"><span class="keyword">var</span> HelloWorld = React.createClass(&#123;</span><br><span class="line">  getInitialState() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'Hi'</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  logMessage() &#123;</span><br><span class="line">    <span class="comment">// this magically works because React.createClass autobinds.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"Log"</span> onClick=&#123;<span class="keyword">this</span>.logMessage&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Approach 2: Bind in Render</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">message</span>: <span class="string">'Hi'</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  logMessage() &#123;</span><br><span class="line">    <span class="comment">// This works because of the bind in render below.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"Log"</span> onClick=&#123;<span class="keyword">this</span>.logMessage.bind(<span class="keyword">this</span>)&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Approach 3: Use Arrow Function in Render</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">message</span>: <span class="string">'Hi'</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  logMessage() &#123;</span><br><span class="line">    <span class="comment">// This works because of the arrow function in render below.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"Log"</span> onClick=&#123;() =&gt; <span class="keyword">this</span>.logMessage()&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Approach 4: Bind in Constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">message</span>: <span class="string">'Hi'</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.logMessage = <span class="keyword">this</span>.logMessage.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  logMessage() &#123;</span><br><span class="line">    <span class="comment">// This works because of the bind in the constructor above.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"Log"</span> onClick=&#123;<span class="keyword">this</span>.logMessage&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Approach 5: Arrow Function in Class Property</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Note that state is a property,</span></span><br><span class="line">  <span class="comment">// so no constructor is needed in this case.</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    message: <span class="string">'Hi'</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  logMessage = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// This works because arrow funcs adopt the this binding of the enclosing scope.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.message);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"Log"</span> onClick=&#123;<span class="keyword">this</span>.logMessage&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First let’s see a code sample below&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Deep road of webpack(1) -- path of the image</title>
    <link href="http://yoursite.com/2018/01/22/Deep-road-of-webpack-1-path-of-the-image/"/>
    <id>http://yoursite.com/2018/01/22/Deep-road-of-webpack-1-path-of-the-image/</id>
    <published>2018-01-22T20:40:33.000Z</published>
    <updated>2018-01-22T20:40:33.930Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Note of Webpack that in my Project</title>
    <link href="http://yoursite.com/2018/01/21/A-Note-of-Webpack-that-in-my-Project/"/>
    <id>http://yoursite.com/2018/01/21/A-Note-of-Webpack-that-in-my-Project/</id>
    <published>2018-01-21T21:34:29.000Z</published>
    <updated>2018-01-21T21:34:29.101Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Summary of knowledge point of React</title>
    <link href="http://yoursite.com/2018/01/21/A-Summary-of-knowledge-point-of-React/"/>
    <id>http://yoursite.com/2018/01/21/A-Summary-of-knowledge-point-of-React/</id>
    <published>2018-01-21T20:26:01.000Z</published>
    <updated>2018-01-29T05:33:13.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-Summary-of-knowledge-point-of-React"><a href="#A-Summary-of-knowledge-point-of-React" class="headerlink" title="A Summary of knowledge point of React"></a>A Summary of knowledge point of React</h1><p>1.So recently I figure out two way to get the value from <code>&lt;form&gt;</code></p><h2 id="one-is"><a href="#one-is" class="headerlink" title="one is:"></a><strong>one is:</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handleForm(e)&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.input.value) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> newQuestion = &#123;</span><br><span class="line">title:<span class="keyword">this</span>.input.value  ,</span><br><span class="line">description:<span class="keyword">this</span>.textarea.value,</span><br><span class="line">voteCount:<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.addQuestionForm.reset()</span><br><span class="line"><span class="keyword">this</span>.props.onNewQuestion(newQuestion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and the HTML parts:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">ref</span>=<span class="string">&#123;formDom</span> =&gt;</span> this.addQuestionForm = formDom &#125; name="addQuestion" className="clearfix" style=&#123;styleObj&#125; onSubmit=&#123;this.handleForm&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"qtitle"</span>&gt;</span>问题<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;title</span> =&gt;</span> this.input = title&#125; type="text" className="form-control" id="qtitle" placeholder="您的问题的标题" name = "qtitle"/&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ref</span>=<span class="string">&#123;description</span> =&gt;</span> this.textarea = description&#125; className="form-control" rows="3" placeholder="问题的描述"&gt;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>You see the <code>ref</code> properties inside the form and I try to <code>console.log()</code> this properties which giving the output as:</p><center><br><img src="/2018/01/21/A-Summary-of-knowledge-point-of-React/image1.png" alt=""><br></center><p>so it pull out the whole form tag and assigned it to the global properties.</p><h2 id="second-is-assigned-a-name-to-the-tag"><a href="#second-is-assigned-a-name-to-the-tag" class="headerlink" title="second is: assigned a name to the tag"></a><strong>second is:</strong> assigned a name to the tag</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;title</span> =&gt;</span> this.input = title&#125; type="text" className="form-control" id="qtitle" placeholder="您的问题的标题" name="qtitle"/&gt;</span><br></pre></td></tr></table></figure><p>So, the value can be accessed by doing<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title:event.target.elements.qtitle.value</span><br></pre></td></tr></table></figure></p><hr><p>   ​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-Summary-of-knowledge-point-of-React&quot;&gt;&lt;a href=&quot;#A-Summary-of-knowledge-point-of-React&quot; class=&quot;headerlink&quot; title=&quot;A Summary of knowl
      
    
    </summary>
    
      <category term="React&amp;Redux" scheme="http://yoursite.com/categories/React-Redux/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>How to store Image to Firebase in IOS</title>
    <link href="http://yoursite.com/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/"/>
    <id>http://yoursite.com/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/</id>
    <published>2018-01-21T16:02:36.000Z</published>
    <updated>2018-01-21T20:03:14.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-Store-Image-to-Firebase-in-IOS"><a href="#How-to-Store-Image-to-Firebase-in-IOS" class="headerlink" title="How to Store Image to Firebase in IOS"></a>How to Store Image to Firebase in IOS</h1><p>First let’s see the official video about storage in Firebase:</p><iframe width="854" height="480" src="https://www.youtube.com/embed/_tyjqozrEPY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><h2 id="How-it-works-in-Firebase"><a href="#How-it-works-in-Firebase" class="headerlink" title="How it works in Firebase ?"></a>How it works in Firebase ?</h2><p><img src="/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/image1.jpg" alt=""></p><p>In short, using Firebase Storage to store the images and using Database to refer the image.First, we need to upload the image to the storage, which will received a link of the image after succeed，and we put the link into database for the future use.So, THAT’S IT!</p><p>So move futher in detail, how we can do it</p><h3 id="firebase-setting"><a href="#firebase-setting" class="headerlink" title="firebase setting"></a>firebase setting</h3><p>To use firbase to store image, first we need to setting up in firebase</p><p>1.Create a new project in the firebase(name whatever you want),entering the console</p><p><img src="/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/image3.png" alt=""></p><p>2.Selecting The Storage in left hand side, click start and you will see the following things</p><p><img src="/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/image4.png" width="50%" height="50%" align="center/"></p><p>3.Go to the rule page, deleting the <code>if condition</code> behind <code>allow read, write</code>, and public it(ignore the warning)</p><p>4.Pod install Firebase-Core</p><p>5.Setting up the firebase in AppDelegate</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions:[UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"><span class="type">FirebaseApp</span>.configure()</span><br><span class="line">   <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Uploading-Image"><a href="#Uploading-Image" class="headerlink" title="Uploading Image"></a>Uploading Image</h3><p>So after finishing all of the pre-work, let’s go to the main content</p><p>1.First you need to link the UIButton(indicate upload image) to the View Controller and inject UIImagePickerController which allows us to choose image from Photo</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">uploadBtnAction</span><span class="params">(<span class="number">_</span> sender: UIButton)</span></span> &#123;</span><br><span class="line"><span class="comment">// Initiate the UIImagePicker</span></span><br><span class="line"><span class="keyword">let</span> imagePickerController = <span class="type">UIImagePickerController</span>()</span><br><span class="line"><span class="comment">// setting up delegate</span></span><br><span class="line">imagePickerController.delegate = <span class="keyword">self</span></span><br><span class="line"><span class="comment">// creating a UIAlertController instance and setting the title and style to actionSheet</span></span><br><span class="line"><span class="keyword">let</span> imagePickerAlertController = <span class="type">UIAlertController</span>(title: <span class="string">"Upload Image"</span>, message: <span class="string">"Please choose the image"</span>, preferredStyle: .actionSheet)</span><br><span class="line"><span class="comment">// creating three UIAlertAction instance and do the same things as above</span></span><br><span class="line"><span class="keyword">let</span> imageFromLibAction = <span class="type">UIAlertAction</span>(title: <span class="string">"PhotoLibrary"</span>, style: .<span class="keyword">default</span>) &#123; (<span class="type">Void</span>) <span class="keyword">in</span> </span><br><span class="line"><span class="comment">// Whether can we get the photo from photolibrary</span></span><br><span class="line"><span class="keyword">if</span> <span class="type">UIImagePickerController</span>.isSourceTypeAvailable(.photoLibrary) &#123;</span><br><span class="line"><span class="comment">// If we can, setting image source of UIImagePickerController is photolibrary (.photoLibrary)，and present UIImagePickerController</span></span><br><span class="line">imagePickerController.sourceType = .photoLibrary</span><br><span class="line"><span class="keyword">self</span>.present(imagePickerController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> imageFromCameraAction = <span class="type">UIAlertAction</span>(title: <span class="string">"camera"</span>, style: .<span class="keyword">default</span>) &#123; (<span class="type">Void</span>) <span class="keyword">in</span></span><br><span class="line"><span class="comment">// To see if we can get photos from camera</span></span><br><span class="line"><span class="keyword">if</span> <span class="type">UIImagePickerController</span>.isSourceTypeAvailable(.camera) &#123; </span><br><span class="line"><span class="comment">// if we can，setting the source of UIImagePickerController is camera (.camera)，and present UIImagePickerController</span></span><br><span class="line">imagePickerController.sourceType = .camera</span><br><span class="line"><span class="keyword">self</span>.present(imagePickerController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// adding a cancel action </span></span><br><span class="line"><span class="keyword">let</span> cancelAction = <span class="type">UIAlertAction</span>(title: <span class="string">"cancel"</span>, style: .cancel) &#123; (<span class="type">Void</span>) <span class="keyword">in</span></span><br><span class="line">imagePickerAlertController.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// add three UIAlertActions above to UIAlertController</span></span><br><span class="line">   imagePickerAlertController.addAction(imageFromLibAction)</span><br><span class="line">imagePickerAlertController.addAction(imageFromCameraAction)</span><br><span class="line">imagePickerAlertController.addAction(cancelAction)</span><br><span class="line">present(imagePickerAlertController, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.Creating<code>UIImagePickerControllerDelegate</code>and<code>UINavigationControllerDelegate</code>to get the image from photolibrary and camera<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UIImagePickerControllerDelegate</span>, <span class="title">UINavigationControllerDelegate</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">imagePickerController</span><span class="params">(<span class="number">_</span> picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any])</span></span> &#123;     </span><br><span class="line"><span class="keyword">var</span> selectedImageFromPicker: <span class="type">UIImage</span>?<span class="comment">// get the file from UIImagePickerController </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> pickedImage = info[<span class="type">UIImagePickerControllerOriginalImage</span>] <span class="keyword">as</span>? <span class="type">UIImage</span> &#123;</span><br><span class="line">selectedImageFromPicker = pickedImage</span><br><span class="line">&#125; </span><br><span class="line">       <span class="comment">// generating uuid</span></span><br><span class="line">       <span class="keyword">let</span> uniqueString = <span class="type">NSUUID</span>().uuidString <span class="keyword">if</span> <span class="keyword">let</span> selectedImage = selectedImageFromPicker &#123;     <span class="built_in">print</span>(<span class="string">"\(uniqueString), \(selectedImage)"</span>)</span><br><span class="line">&#125; </span><br><span class="line">      dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>all finished it will look like this: </p><center><br><img src="/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/image5.png" alt=""><br></center><p>3.Adding two properties into info.plist: <code>Privacy-Camera Usage Description</code> and <code>Privacy–Photo Library Usage Description</code></p><center><br><img src="/2018/01/21/How-to-store-Image-to-Firebase-with-IOS/image6.png" alt=""><br></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-to-Store-Image-to-Firebase-in-IOS&quot;&gt;&lt;a href=&quot;#How-to-Store-Image-to-Firebase-in-IOS&quot; class=&quot;headerlink&quot; title=&quot;How to Store Image
      
    
    </summary>
    
    
      <category term="Firebase" scheme="http://yoursite.com/tags/Firebase/"/>
    
  </entry>
  
  <entry>
    <title>Q:update firebase data</title>
    <link href="http://yoursite.com/2018/01/19/Q-update-firebase-data/"/>
    <id>http://yoursite.com/2018/01/19/Q-update-firebase-data/</id>
    <published>2018-01-20T02:22:23.000Z</published>
    <updated>2018-01-20T02:44:49.560Z</updated>
    
    <content type="html"><![CDATA[<p>So the question is :</p><p>If I want to update the display name, How to update it ?</p><pre><code>-Users  -KUanJA9egwmPsJCxXpv     displayName:&quot;Test Trainer&quot;     email:&quot;test@gmail.com&quot;     uid: &quot;jRXMsNZHR2exqifnR2rXcceEMxF2&quot;</code></pre><p>&lt;–!more–&gt;</p><p>And the answer is : </p><p>If you want to update the displayname of this user</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = firebase.database();</span><br><span class="line">db.ref(<span class="string">"-Users/-KUanJA9egwmPsJCxXpv/displayName"</span>).set(<span class="string">"New trainer"</span>);</span><br></pre></td></tr></table></figure><p>equals to</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.ref(<span class="string">"-Users/-KUanJA9egwmPsJCxXpv"</span>).update(&#123; <span class="attr">displayName</span>: <span class="string">"New trainer"</span> &#125;);</span><br></pre></td></tr></table></figure><p>Probably you need to look up the ID first :<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query db.ref(<span class="string">"-Users"</span>).orderByKey(<span class="string">"uid"</span>).equalTo(<span class="string">"jRXMsNZHR2exqifnR2rXcceEMxF2"</span>);</span><br><span class="line">query.once(<span class="string">"child_added"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">snapshot</span>) </span>&#123;</span><br><span class="line">  snapshot.ref.update(&#123; <span class="attr">displayName</span>: <span class="string">"New trainer"</span> &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>But Here is a better Design of Database(which put the uid as the parent of main content)</p><pre><code>-Users  jRXMsNZHR2exqifnR2rXcceEMxF2     displayName:&quot;Test Trainer&quot;         email:&quot;test@gmail.com&quot;</code></pre><p>Now you can update by :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentUser = firebase.auth().currentUser;</span><br><span class="line">db.ref(<span class="string">"-Users/"</span>+currentUser.uid).update(&#123; <span class="attr">displayName</span>: <span class="string">"New trainer"</span> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So the question is :&lt;/p&gt;
&lt;p&gt;If I want to update the display name, How to update it ?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Users
  -KUanJA9egwmPsJCxXpv

     d
      
    
    </summary>
    
    
      <category term="Question Firebase" scheme="http://yoursite.com/tags/Question-Firebase/"/>
    
  </entry>
  
</feed>
